# Auto-generated using compose2nix v0.3.1.
{ pkgs, lib, ... }:

{
  virtualisation.oci-containers.backend = "docker";

  # Containers
  virtualisation.oci-containers.containers."tws-ibkr" = {
    image = "ghcr.io/extrange/ibkr:stable";
    environment = {
      "PASSWORD" = "";
      "USERNAME" = "";
    };
    ports = [
      "127.0.0.1:6080:6080/tcp"
      "127.0.0.1:8888:8888/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=ibkr"
      "--network=tws_default"
    ];
  };
  systemd.services."docker-tws-ibkr" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "yes";
    };
    after = [
      "docker-network-tws_default.service"
    ];
    requires = [
      "docker-network-tws_default.service"
    ];
    partOf = [
      "tws.target"
    ];
    wantedBy = [
      "tws.target"
    ];
  };

  # Networks
  systemd.services."docker-network-tws_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f tws_default";
    };
    script = ''
      docker network inspect tws_default || docker network create tws_default
    '';
    partOf = [ "tws.target" ];
    wantedBy = [ "tws.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."tws" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
